Check & Repair  File systems  ----> EXT4 , XFS, ZFS

========================================================================


fsck[ file system check ] ,e2fsck ---> ext4

[ diff
e2fsck ---> made for ext2,3 and then supported for ext4 also
fsck -----> it will run same e2fsck when running ext4 fs ]
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

fsck --->  Below package is responsible for 


[root@localhost ~]# rpm -qf `which fsck`
util-linux-2.32.1-44.el8_9.1.x86_64
[root@localhost ~]#


The exit code returned by fsck is the sum of the following conditions:

              0      No errors
              1      Filesystem errors corrected
              2      System should be rebooted
              4      Filesystem errors left uncorrected
              8      Operational error
              16     Usage or syntax error
              32     Checking canceled by user request
              128    Shared-library error


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


e2fsck ---> 

[root@localhost ~]# rpm -qf `which e2fsck`
e2fsprogs-1.45.6-5.el8.x86_64
[root@localhost ~]# 

********************************************************************************************

xfs_repair   ---> xfs

===============================================================================================


Environment Setup:-

Pre requisites:-
4 X 5GB 
1 X 10GB

Step :-1 Created Partitions  5GB ---> 1 partition
                   10GB ---> 2 partition 

[root@localhost ~]# lsblk
NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda             8:0    0    5G  0 disk 
└─sda1          8:1    0    5G  0 part 
sdb             8:16   0    5G  0 disk 
└─sdb1          8:17   0    5G  0 part 
sdc             8:32   0    5G  0 disk 
└─sdc1          8:33   0    5G  0 part 
sdd             8:48   0   10G  0 disk 
├─sdd1          8:49   0    5G  0 part 
└─sdd2          8:50   0    5G  0 part 
sde             8:64   0    5G  0 disk 
└─sde1          8:65   0    5G  0 part 
**********************************************************************************

Step:-2 Formatted each partition with different fs type

[root@localhost ~]# mkfs.ext2  /dev/sda1
mke2fs 1.45.6 (20-Mar-2020)
Creating filesystem with 1310464 4k blocks and 327680 inodes
Filesystem UUID: 71ed468e-e62b-46c7-9b31-9c6554577bfa
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736

Allocating group tables: done                            
Writing inode tables: done                            
Writing superblocks and filesystem accounting information: done 

[root@localhost ~]# mkfs.ext3  /dev/sdb1
mke2fs 1.45.6 (20-Mar-2020)
Creating filesystem with 1310464 4k blocks and 327680 inodes
Filesystem UUID: 5bf2c06c-e7b0-44f7-ad43-5db1f8bf6467
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done 

[root@localhost ~]# mkfs.ext4  /dev/sdc1
mke2fs 1.45.6 (20-Mar-2020)
Creating filesystem with 1310464 4k blocks and 327680 inodes
Filesystem UUID: 9460d2f6-2a6b-489e-ae38-376cc9a8f386
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done 

[root@localhost ~]# mkfs.xfs  /dev/sde1
meta-data=/dev/sde1              isize=512    agcount=4, agsize=327616 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=0 inobtcount=0
data     =                       bsize=4096   blocks=1310464, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=2560, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
[root@localhost ~]#



[root@localhost ~]# lsblk -f
NAME          FSTYPE      LABEL UUID                                   MOUNTPOINT
sda                                                                    
└─sda1        ext2              71ed468e-e62b-46c7-9b31-9c6554577bfa   
sdb                                                                    
└─sdb1        ext3              5bf2c06c-e7b0-44f7-ad43-5db1f8bf6467   
sdc                                                                    
└─sdc1        ext4              9460d2f6-2a6b-489e-ae38-376cc9a8f386   
sdd                                                                    
├─sdd1                                                                 
└─sdd2                                                                 
sde                                                                    
└─sde1        xfs               96ef2a54-bc89-406d-b77e-7e676eec72ca 

****************************************************************************************************


3.  Created Logical Volume on 10GB disk

[root@localhost ~]# pvcreate /dev/sdd1 /dev/sdd2 
  Physical volume "/dev/sdd1" successfully created.
  Physical volume "/dev/sdd2" successfully created.

[root@localhost ~]# vgcreate ext4vg /dev/sdd1
  Volume group "ext4vg" successfully created

[root@localhost ~]# vgcreate xfsvg /dev/sdd2
  Volume group "xfsvg" successfully created

[root@localhost ~]# vgs
  VG     #PV #LV #SN Attr   VSize   VFree 
  ext4vg   1   0   0 wz--n-  <5.00g <5.00g
  rhel     1   2   0 wz--n- <29.00g     0 
  xfsvg    1   0   0 wz--n-  <5.00g <5.00g
 

[root@localhost ~]# lvcreate -L 4G -n ext4lv ext4vg
  Logical volume "ext4lv" created.

[root@localhost ~]# lvcreate -L 4G -n xfslv xfsvg
  Logical volume "xfslv" created.

[root@localhost ~]# lvs
  LV     VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  ext4lv ext4vg -wi-a-----   4.00g                                                    
  root   rhel   -wi-ao---- <26.00g                                                    
  swap   rhel   -wi-ao----   3.00g                                                    
  xfslv  xfsvg  -wi-a-----   4.00g                                                    
[root@localhost ~]#

*************************************************************************************************

4. Format the Logical Volume

[root@localhost ~]# mkfs.ext4 /dev/ext4vg/ext4lv 
mke2fs 1.45.6 (20-Mar-2020)
Creating filesystem with 1048576 4k blocks and 262144 inodes
Filesystem UUID: afa3f99d-494b-4b41-be00-3f50f4791f2d
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done 

[root@localhost ~]# mkfs.xfs /dev/xfsvg/xfslv 
meta-data=/dev/xfsvg/xfslv       isize=512    agcount=4, agsize=262144 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=0 inobtcount=0
data     =                       bsize=4096   blocks=1048576, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=2560, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
[root@localhost ~]# 

*******************************************************************************************

Mounting the fs and mentioning in fstab

[root@localhost ~]# mkdir /mnt/ext2data
[root@localhost ~]# mkdir /mnt/ext3data
[root@localhost ~]# mkdir /mnt/ext4data
[root@localhost ~]# mkdir /mnt/xfsdata
[root@localhost ~]# mkdir /mnt/ext4lvdata
[root@localhost ~]# mkdir /mnt/xfslvdata
[root@localhost ~]# 
 

mentioned fs check order 1-5

[root@localhost ~]# cat /etc/fstab | grep mnt
/dev/sda1               /mnt/ext2data           ext2    defaults        0 1
/dev/sdb1               /mnt/ext3data	        ext3    defaults        0 2
/dev/sdc1               /mnt/ext4data           ext4    defaults        0 3
/dev/sde1               /mnt/xfsdata            xfs     defaults        0 4
/dev/ext4vg/ext4lv      /mnt/ext4lvdata         ext4    defaults        0 5
/dev/xfsvg/xfslv        /mnt/xfslvdata          xfs     defaults        0 6
[root@localhost ~]# 

Mounted the fs with 

[root@localhost ~]# mount -a

[root@localhost ~]# df -hTP | grep mnt
/dev/sda1                 ext2      5.0G   24K  4.7G   1% /mnt/ext2data
/dev/sdb1                 ext3      4.9G   92K  4.6G   1% /mnt/ext3data
/dev/sdc1                 ext4      4.9G   24K  4.6G   1% /mnt/ext4data
/dev/sde1                 xfs       5.0G   68M  5.0G   2% /mnt/xfsdata
/dev/mapper/ext4vg-ext4lv ext4      3.9G   24K  3.7G   1% /mnt/ext4lvdata
/dev/mapper/xfsvg-xfslv   xfs       4.0G   61M  4.0G   2% /mnt/xfslvdata
[root@localhost ~]# 


*******************************************************************

EXT2 fs
****************************************************************************


1. Keep some data 

[root@localhost ~]# cd /mnt/ext2data/
[root@localhost ext2data]# touch {1..10}
[root@localhost ext2data]# cal > cal.txt
[root@localhost ext2data]# cd

***************************************************************

2. Need to unmount the fs to run fsck

It showing clean means "No errors"

[root@localhost ~]# umount /dev/sda1 
[root@localhost ~]# fsck /dev/sda1 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
/dev/sda1: clean, 22/327680 files, 23135/1310464 blocks
[root@localhost ~]# 

****************************************************************************

3. FSCK option

-p --> auto repair [no questions]
-n --> make no changes to the fs
-y --> all questions " yes"
-c --> to check bad blocks and the to the  bad block list
-f --> force checking even FS is "clean"
-v --> verbose
-b --> superblock user alternative superblock
-B --> block size force blocksize when looking for superblock
-j --> external Journal set location of external journal
-l --> bad blocks file add to the bad blocks list
-L --> bad blocks file set to the bad blocks list

*************************************************************************************

4.Both fsck and e2fsck are same 

-f ---> shows additional information in checking

[root@localhost ~]# fsck -f /dev/sda1 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
/dev/sda1: 22/327680 files (0.0% non-contiguous), 23135/1310464 blocks

[root@localhost ~]# e2fsck -f /dev/sda1 
e2fsck 1.45.6 (20-Mar-2020)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
/dev/sda1: 22/327680 files (0.0% non-contiguous), 23135/1310464 blocks
[root@localhost ~]# 

*****************************************************************

5. verbose of fsck shows more information like how many files stored

[root@localhost ~]# fsck -vf /dev/sda1 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information

          22 inodes used (0.01%, out of 327680)
           0 non-contiguous files (0.0%)
           0 non-contiguous directories (0.0%)
             # of inodes with ind/dind/tind blocks: 0/0/0
       23135 blocks used (1.77%, out of 1310464)
           0 bad blocks
           1 large file

          11 regular files
           2 directories
           0 character device files
           0 block device files
           0 fifos
           0 links
           0 symbolic links (0 fast symbolic links)
           0 sockets
------------
          13 files
[root@localhost ~]# 
***********************************************************************

6. fsck -a ---> auto repair---> It will auto repair if any issue their

-f for forcefully


[root@localhost ~]# fsck -a /dev/sda1 
fsck from util-linux 2.32.1
/dev/sda1: clean, 22/327680 files, 23135/1310464 blocks
[root@localhost ~]# fsck -af /dev/sda1 
fsck from util-linux 2.32.1
/dev/sda1: 22/327680 files (0.0% non-contiguous), 23135/1310464 blocks
[root@localhost ~]# 

**********************************************************************

7. If we don't need repair we just need to check the file system we can use -n option

[root@localhost ~]# fsck -n /dev/sda1 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
/dev/sda1: clean, 22/327680 files, 23135/1310464 blocks
[root@localhost ~]# 

*************************************************************************************

EXT3 FS
**********************************************************************************

1. /dev/sdb1 is ext3 fs. before proceeding fsck need to unmount
[root@localhost ~]# df -hPT | grep ext3
/dev/sdb1                 ext3      4.9G   92K  4.6G   1% /mnt/ext3data
[root@localhost ~]# 


[root@localhost ~]# umount /dev/sdb1

**********************************************************************************
2. fsck seems clean for forcefully use -f

[root@localhost ~]# fsck /dev/sdb1 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
/dev/sdb1: clean, 11/327680 files, 39535/1310464 blocks
[root@localhost ~]# fsck -f /dev/sdb1 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
/dev/sdb1: 11/327680 files (0.0% non-contiguous), 39535/1310464 blocks

***********************************************************
3. for ext fs fsck manually triggers e2fsck

[root@localhost ~]# e2fsck -f /dev/sdb1 
e2fsck 1.45.6 (20-Mar-2020)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
/dev/sdb1: 11/327680 files (0.0% non-contiguous), 39535/1310464 blocks
[root@localhost ~]# 

*******************************************************************************

EXT4 FS
********************************************************************************

Same Procedure as EXT2, EXT3

[root@localhost ~]# df -hTP | grep sdc1
/dev/sdc1                 ext4      4.9G   24K  4.6G   1% /mnt/ext4data
[root@localhost ~]# umount /dev/sdc1 
[root@localhost ~]# fsck /dev/sdc1 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
/dev/sdc1: clean, 11/327680 files, 42078/1310464 blocks
[root@localhost ~]# fsck -vf /dev/sdc1 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information

          11 inodes used (0.00%, out of 327680)
           0 non-contiguous files (0.0%)
           0 non-contiguous directories (0.0%)
             # of inodes with ind/dind/tind blocks: 0/0/0
             Extent depth histogram: 3
       42078 blocks used (3.21%, out of 1310464)
           0 bad blocks
           1 large file

           0 regular files
           2 directories
           0 character device files
           0 block device files
           0 fifos
           0 links
           0 symbolic links (0 fast symbolic links)
           0 sockets
------------
           2 files
[root@localhost ~]# 

*******************************************************************************************


XFS FS
**********************************************************************************

1.for XFS file system fsck won't work. But for damaged fs repair we can use xfs_repair

[root@localhost ~]# df -hTP | grep sde
/dev/sde1                 xfs       5.0G   68M  5.0G   2% /mnt/xfsdata
[root@localhost ~]# umount /dev/sde1 
[root@localhost ~]# fsck /dev/sde1 
fsck from util-linux 2.32.1
If you wish to check the consistency of an XFS filesystem or
repair a damaged filesystem, see xfs_repair(8).
[root@localhost ~]# 

********************************************************************************
[Caution:-]
2. IF we use  below command we It will automatically  repair the FS and check the FS


[root@localhost ~]# xfs_repair /dev/sde1 
Phase 1 - find and verify superblock...
Phase 2 - using internal log
        - zero log...
        - scan filesystem freespace and inode maps...
        - found root inode chunk
Phase 3 - for each AG...
        - scan and clear agi unlinked lists...
        - process known inodes and perform inode discovery...
        - agno = 0
        - agno = 1
        - agno = 2
        - agno = 3
        - process newly discovered inodes...
Phase 4 - check for duplicate blocks...
        - setting up duplicate extent list...
        - check for inodes claiming duplicate blocks...
        - agno = 0
        - agno = 1
        - agno = 2
        - agno = 3
Phase 5 - rebuild AG headers and trees...
        - reset superblock...
Phase 6 - check inode connectivity...
        - resetting contents of realtime bitmap and summary inodes
        - traversing filesystem ...
        - traversal finished ...
        - moving disconnected inodes to lost+found ...
Phase 7 - verify and correct link counts...
done
[root@localhost ~]# 

******************************************************************************************************


LVM Ext4 FS

**********************************************************************

[root@localhost ~]# df -hTP | grep ext4lv
/dev/mapper/ext4vg-ext4lv ext4      3.9G   24K  3.7G   1% /mnt/ext4lvdata
[root@localhost ~]# umount /dev/mapper/ext4vg-ext4lv 
[root@localhost ~]# fsck /dev/mapper/ext4vg-ext4lv 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
/dev/mapper/ext4vg-ext4lv: clean, 11/262144 files, 36942/1048576 blocks
[root@localhost ~]# fsck -f /dev/mapper/ext4vg-ext4lv 
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
/dev/mapper/ext4vg-ext4lv: 11/262144 files (0.0% non-contiguous), 36942/1048576 blocks
[root@localhost ~]# 

*****************************************************************************************

LVM XFS FS


[root@localhost ~]# df -hTP | grep xfslv
/dev/mapper/xfsvg-xfslv xfs       4.0G   61M  4.0G   2% /mnt/xfslvdata
[root@localhost ~]# umount /mnt/xfslvdata 
[root@localhost ~]# fsck  /dev/mapper/xfsvg-xfslv 
fsck from util-linux 2.32.1
If you wish to check the consistency of an XFS filesystem or
repair a damaged filesystem, see xfs_repair(8).
[root@localhost ~]# xfs_repair /dev/mapper/xfsvg-xfslv 
Phase 1 - find and verify superblock...
Phase 2 - using internal log
        - zero log...
        - scan filesystem freespace and inode maps...
        - found root inode chunk
Phase 3 - for each AG...
        - scan and clear agi unlinked lists...
        - process known inodes and perform inode discovery...
        - agno = 0
        - agno = 1
        - agno = 2
        - agno = 3
        - process newly discovered inodes...
Phase 4 - check for duplicate blocks...
        - setting up duplicate extent list...
        - check for inodes claiming duplicate blocks...
        - agno = 0
        - agno = 1
        - agno = 2
        - agno = 3
Phase 5 - rebuild AG headers and trees...
        - reset superblock...
Phase 6 - check inode connectivity...
        - resetting contents of realtime bitmap and summary inodes
        - traversing filesystem ...
        - traversal finished ...
        - moving disconnected inodes to lost+found ...
Phase 7 - verify and correct link counts...
done
[root@localhost ~]# 

***************************************************************************************************

=========================================================================

FSCK OPtions 
*****************************

1. fsck -A --->  it will check based on /etc/fstab and checkorder define


[root@localhost ~]# fsck -A
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
/dev/sda1 is mounted.
e2fsck: Cannot continue, aborting.


e2fsck 1.45.6 (20-Mar-2020)
e2fsck: need terminal for interactive repairs
e2fsck 1.45.6 (20-Mar-2020)
e2fsck: need terminal for interactive repairs
If you wish to check the consistency of an XFS filesystem or
repair a damaged filesystem, see xfs_repair(8).
e2fsck 1.45.6 (20-Mar-2020)
e2fsck: need terminal for interactive repairs
If you wish to check the consistency of an XFS filesystem or
repair a damaged filesystem, see xfs_repair(8).
[root@localhost ~]# 

***************************************************************

2. to exclude  root fs for fsck

[root@localhost ~]# fsck -AR
fsck from util-linux 2.32.1
e2fsck 1.45.6 (20-Mar-2020)
/dev/sda1 is mounted.
e2fsck: Cannot continue, aborting.


e2fsck 1.45.6 (20-Mar-2020)
e2fsck: need terminal for interactive repairs
e2fsck 1.45.6 (20-Mar-2020)
e2fsck: need terminal for interactive repairs
If you wish to check the consistency of an XFS filesystem or
repair a damaged filesystem, see xfs_repair(8).
e2fsck 1.45.6 (20-Mar-2020)
e2fsck: need terminal for interactive repairs
If you wish to check the consistency of an XFS filesystem or
repair a damaged filesystem, see xfs_repair(8).
[root@localhost ~]# 

*********************************************************************

3. fsck -AR -v -y

-v ---> verbose

-y ----> if any errors found it will repair the fs
*********************************************************************************

4. Define type

fsck -t ext2 /dev/sde2

[ Now  a days we don't have to define type ]

**********************************************************************
==========================================================================

If we have corrupted rootvg and having bad blocks

************************************************************************************************


[ Images ]

*******************************************************************************

Note :-
corrupting and fixing the fs
 we can use ext4 cause we can decrease and increase the fs. we try to decrease without resize2fs. we can fix the issue with fsck
******************************************************************

comments :-

Check order for fs is not more than 2  if we mention 3 then system is gonna emergency mode
